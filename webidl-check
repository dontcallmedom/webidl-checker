#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
WebIDL extractor and checker based on widlproc http://widl.webvm.net/
In the commandline, takes one parameter: the URI from which to extract the WebIDLs
and optionally --extract-only to only get the extracted WebIDL
"""

import cgi
import sys
import types
import os
import urlparse
import urllib
import httplib
import html5lib
from lxml import etree
from StringIO import StringIO

try:
    # http_auth is at http://dev.w3.org/cvsweb/2000/tidy-svc/http_auth.py
    # only useful for accessing Basic-Auth protected resources
    # in CGI service
    import http_auth
except ImportError:
    URLOPEN_CLASS = urllib.FancyURLopener
else:
    URLOPEN_CLASS = http_auth.ProxyAuthURLopener

class WrongConfigurationException(Exception):
    """Exception raised when the script is not properly configured."""
    pass


class UnparseableDocumentException(Exception):
    """Exception raised when submitted document can't be turned into XHTML."""
    pass


Page = """Content-Type: text/html;charset=utf-8

<!DOCTYPE html>
<html lang="en-US">
<head><title>WebIDL checker%s</title>
<link rel="stylesheet" href="http://www.w3.org/StyleSheets/base" >
<style type="text/css">
.error { color:red}
.highlight { background-color:#fcc;}
.report {
 border-top:thin solid black;
}
</style>
</head>
<body>

<p><a href="http://www.w3.org/"><img src="http://www.w3.org/Icons/w3c_home" alt="W3C"></a> <a href="http://www.w3.org/2003/Editors">W3C Editors homepage</a> <a href="http://dev.w3.org/2006/webapi/WebIDL/">WebIDL spec</a></p>

<h1>WebIDL checker%s</h1>
"""
Page2 = """
<form method="GET">
<p><label for="doc">Source document</label>: <input id="doc" type="url" name="doc" value="%s"> (Web IDL in HTML, or plain text Web IDL fragments)</p>
<p><label>Ouput format: <select name="output"><option value="html">HTML</option><option value="text" %s>Text (GNU Error format)</option></select></label></p>
<p><input type="submit" value="Check on-line Web IDL"></p>
</form>
<p><strong>OR</strong></p>
<form method="POST" action="?">
<p><label for='input'>Direct input</label>: <textarea id='input' name="input" rows="10" cols="70">%s</textarea></p>
<p><label>Ouput format: <select name="output"><option value="html">HTML</option><option value="text" %s>Text (GNU Error format)</option></select></label></p>
<p><input type="submit" value="Check Web IDL inline"></p>
</form>

<address>
by <a href="http://www.w3.org/People/Dom/">Dominique HazaÃ«l-Massieux</a><br>
powered by <a href="https://github.com/dontcallmedom/webidl-checker/">webidl-checker</a> based on <a href="https://github.com/dontcallmedom/widlproc">widlproc</a>. Please <a href="https://github.com/dontcallmedom/webidl-checker/issues">report bugs on github</a>.
</address>
</body>
</html>
"""

# The next two methods are copied from htmldiff.
# @@Refactor them into a common module.
def copyHeader(copy_func, source, key, header_name=None):
    value = source.get(key)
    if not value:
        return False
    elif header_name is None:
        header_name = key
    copy_func(header_name, value)
    return True

def setupRequest(source_headers):
    # the function below is used to replace
    # the http_error handling to raise an exception in the url_opener
    # OK, this is ugly, but I don't want to create two derivative classes just for that
    def raise_on_http_error(self, url, fp, errcode, errmsg, headers):
        raise UnparseableDocumentException("HTTP Error: %d %s" %(errcode,errmsg))
    opener = URLOPEN_CLASS()
    opener.http_error_default = types.MethodType(raise_on_http_error, opener)
    copyHeader(opener.addheader, source_headers, 'If-Modified-Since')
    copyHeader(opener.addheader, os.environ, 'REMOTE_ADDR', 'X_Forward_IP_Addr')
    return opener

def serveRequest():
    fields = cgi.FieldStorage()
    doc = fields.getfirst('doc', "")
    inp = fields.getfirst('input', "")
    if not (doc or inp):
        print Page % ("", "")
	print Page2 % ("","","", "")
    else:
        output = "html"
        textoutputselected=""
        if fields.getfirst('output') == 'text':
            # we'll output using http://www.gnu.org/prep/standards/standards.html#Errors
            output = "text"
            textoutputselected=" selected='selected'"
        idls = []
        xmlOutput = []
        errors = []
        title = doc
        if doc:
            try:
                srcheaders,idls,xmlOutput,errors = extractIdls(doc, fields.headers)
            except UnparseableDocumentException,e:
                printError(output,doc, textoutputselected, "Failed to parse document as HTML", str(e))
            except WrongConfigurationException,e:
                printError(output,doc, textoutputselected, "Could not run widlproc", str(e))
            for header_name in ('Last-Modified', 'Expires'):
                if copyHeader(lambda header, value: sys.stdout.write("%s: %s" %(header, value)), srcheaders, header_name):
                    print
            title = srcheaders.get('title', title)
        elif inp:
            idls.append(inp)
            xmlout,error = syntax_check(inp,0,1)
            if xmlout:
                xmlOutput.append(xmlout)
            if error:
                errors.append(error)

        if not len(errors):
            xmlWrapper = "<Module>" + "".join(xmlOutput) + "</Module>"
            errors.extend(semantic_check(xmlWrapper, "\n".join(idls), None, 0))

        # sending content type header based on ouput param
        if output=='text':
            print "Content-Type: text/plain;charset=utf-8"
            print

        # payload starts here
        if output=='text':
            printOutputAsText(errors,idls,doc)
        else:
            printOutputAsHTML(errors,idls,doc,title,inp,xmlOutput)

def printError(output,doc, textoutputselected, msg, error):
    print "Status: 500 Internal server error"
    if output=="text":
        print "Content-Type: text/plain;charset=utf-8"
        print

        print "# %s: %s" %(msg,error)
        sys.exit(2)
    else:
        print Page % ("", "")
        print "<p class='error'>%s: <code>%s</code>.</p>"  % (cgi.escape(msg), cgi.escape(error))
        print Page2 % (cgi.escape(doc, True), textoutputselected, "", "")
        sys.exit()

def iter_errors(errors):
    for errnum, error in enumerate(errors, 1):
        idl, errstr, idlline, idlnum = error
        try:
            errline, errmsg = errstr.split(':', 1)
            errline = int(errline)
        except ValueError:
            errmsg = errstr
            errline = 0
        yield errnum, errline, errmsg, idlnum, idlline, idl

def highlightIdl(idllist, errline, errfmt):
    if 0 < (errline or -1) <= len(idllist):
        idllist[errline - 1] = errfmt % (idllist[errline - 1],)

def describeIdl(idlline, idlnum):
    if not idlline:
        return u"IDL #%d" % (idlnum,)
    return u"IDL at line %d" % (idlline,)

def printOutputAsText(errors,idls,doc):
    exit_code = 0
    if len(errors):
        exit_code = 64
        for error_data in iter_errors(errors):
            errorline, msg, position, idlline = error_data[1:5]
            if idlline:
                print "%d:%s" % (errorline + idlline, msg)
            else:
                print "Line %d of IDL #%d:%s" % (errorline, position, msg)
    elif len(idls)==0:
        print "# No WebIDL found in document at %s" % (doc)
    sys.exit(exit_code)

def printOutputAsHTML(errors,idls,doc,title,inp,xmlOutput):
    esc_doc = cgi.escape(doc, True)
    htmltitle = " <a href='%s'>%s</a>" % (esc_doc, cgi.escape(title))
    print Page  % (" " + cgi.escape(title), htmltitle)
    print "<p>Results of checking %s.</p>" % (htmltitle)
    if len(errors):
        print "<p class='error'>The following errors were found in the extracted WebIDLs:</p><ul>"
        for e in iter_errors(errors):
            print "<li><a href='#e%d'>%s</a></li>\n" % (e[0], cgi.escape(e[2]))
        print "</ul>"
        for (counter, errorline, errmsg, idlnum, idlline,
             idl) in iter_errors(errors):
            # highlighting said line in IDL
            idllines = [cgi.escape(line) for line in idl.split("\n")]
            highlightIdl(idllines, errorline,
                         "<span class='highlight'>%s</span>")
            # and printing out the report
            print "<div class='report' id='e%d'>" % (counter)
            print "<pre class='error'>Line %s:%s</pre><p>error in %s</p><pre class='idl'>%s</pre>" % (errorline or "??", cgi.escape(errmsg), describeIdl(idlline, idlnum), "\n".join(idllines))
            print "</div>"
        if len(xmlOutput):
            # @@@ print name of valid interfaces?
            print "<p>%d syntactically correct IDLs also detected.</p>" % (len(xmlOutput))
    elif len(xmlOutput):
        from lxml import etree
        print "<p>%d syntactically correct IDLs detected:</p>" % (len(xmlOutput))
        xslt_doc = etree.parse("/afs/w3.org/pub/WWW/2009/07/widlprocxmltohtmlfragment.xsl")
        transform = etree.XSLT(xslt_doc)
        for x in xmlOutput:
            f = StringIO(x)
            xmldoc = etree.parse(f)
            print "<div class='report'>"
            print transform(xmldoc)
            print "</div>"
    else:
        print "<p class='error'>No WebIDL found in the document at <a href='%s'>%s</a>.</p>" % (esc_doc, esc_doc)
    print Page2 % (esc_doc, "", cgi.escape(inp), "")

def extractIdls(doc, sourceHeaders={}):
    url_opener = setupRequest(sourceHeaders)
    try:
        srcdoc = url_opener.open(doc)
    except IOError as e:
        raise UnparseableDocumentException("I/O error: %s %s" % (e.errno,e.strerror))
    except httplib.InvalidURL:
        raise UnparseableDocumentException("Invalid URL submitted")
    if srcdoc:
        srcheaders = srcdoc.info()
        contentType="text/html", {}
        if srcheaders.has_key('Content-Type'):
            contentType = cgi.parse_header(srcheaders["Content-Type"])
        errors = []
        xmlOutput = []
        idlOutput = []
        if contentType[0] == "text/html":   
            htmldoc = srcdoc.read()
            htmldocio = StringIO(htmldoc)

            ns = {'html': 'http://www.w3.org/1999/xhtml'}
            # Extract WebIDLs from source document in invidual files
            import warnings
            from html5lib.constants import DataLossWarning
            warnings.simplefilter("ignore", DataLossWarning) 
            try:
                tree = html5lib.parse(htmldoc, treebuilder="lxml")
            except Exception, e:
                raise UnparseableDocumentException(str(e))
            # and then get extracts IDLs through XPath            
            title = tree.xpath("/html:html/html:head/html:title/text()",namespaces=ns)
            if len(title):
                srcheaders["title"] = title[0]
            idls = tree.xpath("/html:html/html:body//html:pre[contains(@class,'idl') or contains(@class,'webidl') or html:code[@class='idl-code']]",namespaces=ns)
            for counter, idlHtml in enumerate(idls, 1):
                idl = "".join(idlHtml.xpath("descendant-or-self::text()"))
                idlOutput.append(idl)
                idlline = None
                try:
                    idlline = idlHtml.sourceline
                except AttributeError:
                    idlline = None
                # run widlproc on each of  them
                xmlout,error = syntax_check(idl,idlline,counter)
                if xmlout:
                    xmlOutput.append(xmlout)
                if error:
                    errors.append(error)
        elif contentType[0]=="text/plain":
            # we assume the text doc is a Web IDL fragment
            idl = srcdoc.read()
            idlOutput.append(idl)
            xmlout,error = syntax_check(idl,None,1)
            if xmlout:
                xmlOutput.append(xmlout)
            if error:
                errors.append(error)
        return srcheaders,idlOutput,xmlOutput,errors
    else:
        raise UnparseableDocumentException("could not load resource: ")

# process an IDL fragment with widlproc
# returns the XML representation of the fragment, and a list of errors
def syntax_check(idl,idlline,counter):
    widlproc = os.getenv('WIDLPROC_PATH', '/usr/local/bin/widlproc')
    command = [widlproc,'-no-dtd-ref','/dev/stdin']
    error = None
    xmlOutput = None
    from subprocess import Popen, PIPE
    try:
        p =  Popen(command, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    except OSError:
        raise WrongConfigurationException("widlproc not available at %s" % (command[0]))
    p.stdin.write(idl.encode("utf-8"))
    p.stdin.close()
    retcode = p.wait()
    errmsg = None
    if retcode!=0:
        # widlproc prepends the error message with the filename - we don't need that
        errmsg = p.stderr.read()[len("/dev/stdin: "):].decode("latin-1")
    if errmsg:
        error = (idl,errmsg,idlline,counter)
    else:
        xmlOutput = p.stdout.read()
        # getting rid of XML declaration
        xmlOutput = xmlOutput.split("?>",1)[1]
    return (xmlOutput,error)

def semantic_check(idlXml, idl, idlline, counter):
    import os
    dir = os.path.dirname(__file__)
    errors = []
    schematron = etree.parse(os.path.join(dir, "widlproc-schematron/webidl-schematron.xsl"))
    transform = etree.XSLT(schematron)
    idlXmlTree = etree.fromstring(idlXml)
    errorReport = transform(idlXmlTree)
    errorsInXml = errorReport.xpath("//svrl:failed-assert/svrl:text",namespaces={'svrl': 'http://purl.oclc.org/dsdl/svrl'})
    for err in errorsInXml:
        errmsg = "".join(err.xpath("descendant-or-self::text()"))
        errors.append((idl, errmsg, idlline, counter))
    return errors

def process(url,output='default',semantic=False):
    import codecs, sys
    sys.stderr = codecs.getwriter('utf8')(sys.stderr)

    try:
        (info,idls,xmlOutput,errors)=extractIdls(url)
        if not len(errors) and semantic:
            xmlWrapper = "<Module>" + "".join(xmlOutput) + "</Module>"
            errors.extend(semantic_check(xmlWrapper, "\n".join(idls), 0, 0))
    except UnparseableDocumentException,e:
        sys.stderr.write( "Couldn't parse document at %s:%s" % (url,str(e)))
        sys.exit(1)
    except WrongConfigurationException,e:
        sys.stderr.write( "Couldn't run widlproc: %s\n" % (str(e)))
        sys.stderr.write( "Install it from https://github.com/dontcallmedom/widlproc\n")
        sys.exit(1)

    if output=='default':
        if len(errors):
            for (counter, errorline, errmsg, idlnum, idlline,
                 idl) in iter_errors(errors):
                # highlighting said line in IDL
                print idl
                idllines = idl.split("\n")
                highlightIdl(idllines, errorline, u"*** %s")
                # and printing out the report
                idl = u"\n".join(idllines)
                sys.stderr.write((u"%s:%s\nerror found in %s\n%s" % (errorline or u"??", errmsg, describeIdl(idlline, idlnum), idl)))
                sys.stderr.write("-" * 30 + "\n")
                sys.exit(64)
        if not(len(errors)) and len(xmlOutput):
            print "<Module>" + "".join(xmlOutput) + "</Module>"
            sys.exit(0)
        if len(idls)==0:
            sys.stderr.write( "No WebIDL found in %s" % (url))
            sys.exit(2)
    elif output=='extract-only':
        for idl in idls:
            print idl



if __name__ == '__main__':
    if os.environ.has_key('SCRIPT_NAME'):
        serveRequest()
    else:
        import sys
        import getopt
        try:
            opts, args = getopt.getopt(sys.argv[1:], "he", ["help","extract-only"])
        except getopt.error, msg:
            print msg
            print "for help use --help"
            sys.exit(2)
        if len(args) == 0:
                print __doc__
                sys.exit(2)
        # process options
        output='default'
        semantic=False
        for o, a in opts:
            if o in ("-h", "--help"):
                print __doc__
                sys.exit(0)
            if o in ("-e", "--extract-only"):
                output='extract-only'
            if o in ("-s", "--semantic-checks"):
                semantic=True
        # process arguments
        process(args[0],output,semantic)
